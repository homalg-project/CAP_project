# SPDX-License-Identifier: GPL-2.0-or-later
# AdditiveClosuresForCAP: Additive closures for pre-additive categories
#
# Implementations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecordTools.gi

## BiasedWeakFiberProduct
InstallMethod( AddBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "BiasedWeakFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "BiasedWeakFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## BiasedWeakPushout
InstallMethod( AddBiasedWeakPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "BiasedWeakPushout", category, func, -1 );
    
end );

InstallMethod( AddBiasedWeakPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "BiasedWeakPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## DirectSumMorphismToWeakBiPushout
InstallMethod( AddDirectSumMorphismToWeakBiPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "DirectSumMorphismToWeakBiPushout", category, func, -1 );
    
end );

InstallMethod( AddDirectSumMorphismToWeakBiPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "DirectSumMorphismToWeakBiPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## InjectionOfBiasedWeakPushout
InstallMethod( AddInjectionOfBiasedWeakPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "InjectionOfBiasedWeakPushout", category, func, -1 );
    
end );

InstallMethod( AddInjectionOfBiasedWeakPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "InjectionOfBiasedWeakPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## InjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout
InstallMethod( AddInjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "InjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout", category, func, -1 );
    
end );

InstallMethod( AddInjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "InjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( InjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout,
                    "InjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout by calling InjectionOfBiasedWeakPushout with the WithGiven argument(s) dropped",
                    [
                        [ InjectionOfBiasedWeakPushout, 1 ],
                    ],
  function( cat, a, b, P )
    
    return InjectionOfBiasedWeakPushout( cat, a, b );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( InjectionOfBiasedWeakPushout,
                    "InjectionOfBiasedWeakPushout by calling InjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout with the WithGiven object(s)",
                    [
                        [ InjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout, 1 ],
                        [ BiasedWeakPushout, 1 ],
                    ],
  function( cat, a, b )
    
    return InjectionOfBiasedWeakPushoutWithGivenBiasedWeakPushout( cat, a, b, BiasedWeakPushout( cat, a, b ) );
    
end : is_with_given_derivation := true );

## InjectionOfFirstCofactorOfWeakBiPushout
InstallMethod( AddInjectionOfFirstCofactorOfWeakBiPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "InjectionOfFirstCofactorOfWeakBiPushout", category, func, -1 );
    
end );

InstallMethod( AddInjectionOfFirstCofactorOfWeakBiPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "InjectionOfFirstCofactorOfWeakBiPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## InjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout
InstallMethod( AddInjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "InjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout", category, func, -1 );
    
end );

InstallMethod( AddInjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "InjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( InjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout,
                    "InjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout by calling InjectionOfFirstCofactorOfWeakBiPushout with the WithGiven argument(s) dropped",
                    [
                        [ InjectionOfFirstCofactorOfWeakBiPushout, 1 ],
                    ],
  function( cat, a, b, P )
    
    return InjectionOfFirstCofactorOfWeakBiPushout( cat, a, b );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( InjectionOfFirstCofactorOfWeakBiPushout,
                    "InjectionOfFirstCofactorOfWeakBiPushout by calling InjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout with the WithGiven object(s)",
                    [
                        [ InjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout, 1 ],
                        [ WeakBiPushout, 1 ],
                    ],
  function( cat, a, b )
    
    return InjectionOfFirstCofactorOfWeakBiPushoutWithGivenWeakBiPushout( cat, a, b, WeakBiPushout( cat, a, b ) );
    
end : is_with_given_derivation := true );

## InjectionOfSecondCofactorOfWeakBiPushout
InstallMethod( AddInjectionOfSecondCofactorOfWeakBiPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "InjectionOfSecondCofactorOfWeakBiPushout", category, func, -1 );
    
end );

InstallMethod( AddInjectionOfSecondCofactorOfWeakBiPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "InjectionOfSecondCofactorOfWeakBiPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## InjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout
InstallMethod( AddInjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "InjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout", category, func, -1 );
    
end );

InstallMethod( AddInjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "InjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( InjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout,
                    "InjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout by calling InjectionOfSecondCofactorOfWeakBiPushout with the WithGiven argument(s) dropped",
                    [
                        [ InjectionOfSecondCofactorOfWeakBiPushout, 1 ],
                    ],
  function( cat, a, b, P )
    
    return InjectionOfSecondCofactorOfWeakBiPushout( cat, a, b );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( InjectionOfSecondCofactorOfWeakBiPushout,
                    "InjectionOfSecondCofactorOfWeakBiPushout by calling InjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout with the WithGiven object(s)",
                    [
                        [ InjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout, 1 ],
                        [ WeakBiPushout, 1 ],
                    ],
  function( cat, a, b )
    
    return InjectionOfSecondCofactorOfWeakBiPushoutWithGivenWeakBiPushout( cat, a, b, WeakBiPushout( cat, a, b ) );
    
end : is_with_given_derivation := true );

## ProjectionInFirstFactorOfWeakBiFiberProduct
InstallMethod( AddProjectionInFirstFactorOfWeakBiFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ProjectionInFirstFactorOfWeakBiFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddProjectionInFirstFactorOfWeakBiFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ProjectionInFirstFactorOfWeakBiFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## ProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct
InstallMethod( AddProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct,
                    "ProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct by calling ProjectionInFirstFactorOfWeakBiFiberProduct with the WithGiven argument(s) dropped",
                    [
                        [ ProjectionInFirstFactorOfWeakBiFiberProduct, 1 ],
                    ],
  function( cat, a, b, P )
    
    return ProjectionInFirstFactorOfWeakBiFiberProduct( cat, a, b );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( ProjectionInFirstFactorOfWeakBiFiberProduct,
                    "ProjectionInFirstFactorOfWeakBiFiberProduct by calling ProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct with the WithGiven object(s)",
                    [
                        [ ProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct, 1 ],
                        [ WeakBiFiberProduct, 1 ],
                    ],
  function( cat, a, b )
    
    return ProjectionInFirstFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct( cat, a, b, WeakBiFiberProduct( cat, a, b ) );
    
end : is_with_given_derivation := true );

## ProjectionInSecondFactorOfWeakBiFiberProduct
InstallMethod( AddProjectionInSecondFactorOfWeakBiFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ProjectionInSecondFactorOfWeakBiFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddProjectionInSecondFactorOfWeakBiFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ProjectionInSecondFactorOfWeakBiFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## ProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct
InstallMethod( AddProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct,
                    "ProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct by calling ProjectionInSecondFactorOfWeakBiFiberProduct with the WithGiven argument(s) dropped",
                    [
                        [ ProjectionInSecondFactorOfWeakBiFiberProduct, 1 ],
                    ],
  function( cat, a, b, P )
    
    return ProjectionInSecondFactorOfWeakBiFiberProduct( cat, a, b );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( ProjectionInSecondFactorOfWeakBiFiberProduct,
                    "ProjectionInSecondFactorOfWeakBiFiberProduct by calling ProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct with the WithGiven object(s)",
                    [
                        [ ProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct, 1 ],
                        [ WeakBiFiberProduct, 1 ],
                    ],
  function( cat, a, b )
    
    return ProjectionInSecondFactorOfWeakBiFiberProductWithGivenWeakBiFiberProduct( cat, a, b, WeakBiFiberProduct( cat, a, b ) );
    
end : is_with_given_derivation := true );

## ProjectionOfBiasedWeakFiberProduct
InstallMethod( AddProjectionOfBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ProjectionOfBiasedWeakFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddProjectionOfBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ProjectionOfBiasedWeakFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## ProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct
InstallMethod( AddProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "ProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "ProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( ProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct,
                    "ProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct by calling ProjectionOfBiasedWeakFiberProduct with the WithGiven argument(s) dropped",
                    [
                        [ ProjectionOfBiasedWeakFiberProduct, 1 ],
                    ],
  function( cat, a, b, P )
    
    return ProjectionOfBiasedWeakFiberProduct( cat, a, b );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( ProjectionOfBiasedWeakFiberProduct,
                    "ProjectionOfBiasedWeakFiberProduct by calling ProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct with the WithGiven object(s)",
                    [
                        [ ProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct, 1 ],
                        [ BiasedWeakFiberProduct, 1 ],
                    ],
  function( cat, a, b )
    
    return ProjectionOfBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct( cat, a, b, BiasedWeakFiberProduct( cat, a, b ) );
    
end : is_with_given_derivation := true );

## UniversalMorphismFromBiasedWeakPushout
InstallMethod( AddUniversalMorphismFromBiasedWeakPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalMorphismFromBiasedWeakPushout", category, func, -1 );
    
end );

InstallMethod( AddUniversalMorphismFromBiasedWeakPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalMorphismFromBiasedWeakPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## UniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout
InstallMethod( AddUniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout", category, func, -1 );
    
end );

InstallMethod( AddUniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( UniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout,
                    "UniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout by calling UniversalMorphismFromBiasedWeakPushout with the WithGiven argument(s) dropped",
                    [
                        [ UniversalMorphismFromBiasedWeakPushout, 1 ],
                    ],
  function( cat, a, b, t, P )
    
    return UniversalMorphismFromBiasedWeakPushout( cat, a, b, t );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( UniversalMorphismFromBiasedWeakPushout,
                    "UniversalMorphismFromBiasedWeakPushout by calling UniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout with the WithGiven object(s)",
                    [
                        [ UniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout, 1 ],
                        [ BiasedWeakPushout, 1 ],
                    ],
  function( cat, a, b, t )
    
    return UniversalMorphismFromBiasedWeakPushoutWithGivenBiasedWeakPushout( cat, a, b, t, BiasedWeakPushout( cat, a, b ) );
    
end : is_with_given_derivation := true );

## UniversalMorphismFromWeakBiPushout
InstallMethod( AddUniversalMorphismFromWeakBiPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalMorphismFromWeakBiPushout", category, func, -1 );
    
end );

InstallMethod( AddUniversalMorphismFromWeakBiPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalMorphismFromWeakBiPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## UniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout
InstallMethod( AddUniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout", category, func, -1 );
    
end );

InstallMethod( AddUniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( UniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout,
                    "UniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout by calling UniversalMorphismFromWeakBiPushout with the WithGiven argument(s) dropped",
                    [
                        [ UniversalMorphismFromWeakBiPushout, 1 ],
                    ],
  function( cat, a, b, t, s, P )
    
    return UniversalMorphismFromWeakBiPushout( cat, a, b, t, s );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( UniversalMorphismFromWeakBiPushout,
                    "UniversalMorphismFromWeakBiPushout by calling UniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout with the WithGiven object(s)",
                    [
                        [ UniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout, 1 ],
                        [ WeakBiPushout, 1 ],
                    ],
  function( cat, a, b, t, s )
    
    return UniversalMorphismFromWeakBiPushoutWithGivenWeakBiPushout( cat, a, b, t, s, WeakBiPushout( cat, a, b ) );
    
end : is_with_given_derivation := true );

## UniversalMorphismIntoBiasedWeakFiberProduct
InstallMethod( AddUniversalMorphismIntoBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalMorphismIntoBiasedWeakFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddUniversalMorphismIntoBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalMorphismIntoBiasedWeakFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## UniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct
InstallMethod( AddUniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddUniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( UniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct,
                    "UniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct by calling UniversalMorphismIntoBiasedWeakFiberProduct with the WithGiven argument(s) dropped",
                    [
                        [ UniversalMorphismIntoBiasedWeakFiberProduct, 1 ],
                    ],
  function( cat, a, b, t, P )
    
    return UniversalMorphismIntoBiasedWeakFiberProduct( cat, a, b, t );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( UniversalMorphismIntoBiasedWeakFiberProduct,
                    "UniversalMorphismIntoBiasedWeakFiberProduct by calling UniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct with the WithGiven object(s)",
                    [
                        [ UniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct, 1 ],
                        [ BiasedWeakFiberProduct, 1 ],
                    ],
  function( cat, a, b, t )
    
    return UniversalMorphismIntoBiasedWeakFiberProductWithGivenBiasedWeakFiberProduct( cat, a, b, t, BiasedWeakFiberProduct( cat, a, b ) );
    
end : is_with_given_derivation := true );

## UniversalMorphismIntoWeakBiFiberProduct
InstallMethod( AddUniversalMorphismIntoWeakBiFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalMorphismIntoWeakBiFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddUniversalMorphismIntoWeakBiFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalMorphismIntoWeakBiFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## UniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct
InstallMethod( AddUniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "UniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddUniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "UniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( UniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct,
                    "UniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct by calling UniversalMorphismIntoWeakBiFiberProduct with the WithGiven argument(s) dropped",
                    [
                        [ UniversalMorphismIntoWeakBiFiberProduct, 1 ],
                    ],
  function( cat, a, b, t, s, P )
    
    return UniversalMorphismIntoWeakBiFiberProduct( cat, a, b, t, s );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( UniversalMorphismIntoWeakBiFiberProduct,
                    "UniversalMorphismIntoWeakBiFiberProduct by calling UniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct with the WithGiven object(s)",
                    [
                        [ UniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct, 1 ],
                        [ WeakBiFiberProduct, 1 ],
                    ],
  function( cat, a, b, t, s )
    
    return UniversalMorphismIntoWeakBiFiberProductWithGivenWeakBiFiberProduct( cat, a, b, t, s, WeakBiFiberProduct( cat, a, b ) );
    
end : is_with_given_derivation := true );

## WeakBiFiberProduct
InstallMethod( AddWeakBiFiberProduct,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakBiFiberProduct", category, func, -1 );
    
end );

InstallMethod( AddWeakBiFiberProduct,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakBiFiberProduct", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## WeakBiFiberProductMorphismToDirectSum
InstallMethod( AddWeakBiFiberProductMorphismToDirectSum,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakBiFiberProductMorphismToDirectSum", category, func, -1 );
    
end );

InstallMethod( AddWeakBiFiberProductMorphismToDirectSum,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakBiFiberProductMorphismToDirectSum", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## WeakBiPushout
InstallMethod( AddWeakBiPushout,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakBiPushout", category, func, -1 );
    
end );

InstallMethod( AddWeakBiPushout,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakBiPushout", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## WeakCokernelColift
InstallMethod( AddWeakCokernelColift,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakCokernelColift", category, func, -1 );
    
end );

InstallMethod( AddWeakCokernelColift,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakCokernelColift", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## WeakCokernelColiftWithGivenWeakCokernelObject
InstallMethod( AddWeakCokernelColiftWithGivenWeakCokernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakCokernelColiftWithGivenWeakCokernelObject", category, func, -1 );
    
end );

InstallMethod( AddWeakCokernelColiftWithGivenWeakCokernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakCokernelColiftWithGivenWeakCokernelObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( WeakCokernelColiftWithGivenWeakCokernelObject,
                    "WeakCokernelColiftWithGivenWeakCokernelObject by calling WeakCokernelColift with the WithGiven argument(s) dropped",
                    [
                        [ WeakCokernelColift, 1 ],
                    ],
  function( cat, alpha, tau, K )
    
    return WeakCokernelColift( cat, alpha, tau );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( WeakCokernelColift,
                    "WeakCokernelColift by calling WeakCokernelColiftWithGivenWeakCokernelObject with the WithGiven object(s)",
                    [
                        [ WeakCokernelColiftWithGivenWeakCokernelObject, 1 ],
                        [ WeakCokernelObject, 1 ],
                    ],
  function( cat, alpha, tau )
    
    return WeakCokernelColiftWithGivenWeakCokernelObject( cat, alpha, tau, WeakCokernelObject( cat, alpha ) );
    
end : is_with_given_derivation := true );

## WeakCokernelObject
InstallMethod( AddWeakCokernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakCokernelObject", category, func, -1 );
    
end );

InstallMethod( AddWeakCokernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakCokernelObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## WeakCokernelProjection
InstallMethod( AddWeakCokernelProjection,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakCokernelProjection", category, func, -1 );
    
end );

InstallMethod( AddWeakCokernelProjection,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakCokernelProjection", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## WeakCokernelProjectionWithGivenWeakCokernelObject
InstallMethod( AddWeakCokernelProjectionWithGivenWeakCokernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakCokernelProjectionWithGivenWeakCokernelObject", category, func, -1 );
    
end );

InstallMethod( AddWeakCokernelProjectionWithGivenWeakCokernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakCokernelProjectionWithGivenWeakCokernelObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( WeakCokernelProjectionWithGivenWeakCokernelObject,
                    "WeakCokernelProjectionWithGivenWeakCokernelObject by calling WeakCokernelProjection with the WithGiven argument(s) dropped",
                    [
                        [ WeakCokernelProjection, 1 ],
                    ],
  function( cat, alpha, K )
    
    return WeakCokernelProjection( cat, alpha );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( WeakCokernelProjection,
                    "WeakCokernelProjection by calling WeakCokernelProjectionWithGivenWeakCokernelObject with the WithGiven object(s)",
                    [
                        [ WeakCokernelProjectionWithGivenWeakCokernelObject, 1 ],
                        [ WeakCokernelObject, 1 ],
                    ],
  function( cat, alpha )
    
    return WeakCokernelProjectionWithGivenWeakCokernelObject( cat, alpha, WeakCokernelObject( cat, alpha ) );
    
end : is_with_given_derivation := true );

## WeakKernelEmbedding
InstallMethod( AddWeakKernelEmbedding,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakKernelEmbedding", category, func, -1 );
    
end );

InstallMethod( AddWeakKernelEmbedding,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakKernelEmbedding", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## WeakKernelEmbeddingWithGivenWeakKernelObject
InstallMethod( AddWeakKernelEmbeddingWithGivenWeakKernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakKernelEmbeddingWithGivenWeakKernelObject", category, func, -1 );
    
end );

InstallMethod( AddWeakKernelEmbeddingWithGivenWeakKernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakKernelEmbeddingWithGivenWeakKernelObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( WeakKernelEmbeddingWithGivenWeakKernelObject,
                    "WeakKernelEmbeddingWithGivenWeakKernelObject by calling WeakKernelEmbedding with the WithGiven argument(s) dropped",
                    [
                        [ WeakKernelEmbedding, 1 ],
                    ],
  function( cat, alpha, K )
    
    return WeakKernelEmbedding( cat, alpha );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( WeakKernelEmbedding,
                    "WeakKernelEmbedding by calling WeakKernelEmbeddingWithGivenWeakKernelObject with the WithGiven object(s)",
                    [
                        [ WeakKernelEmbeddingWithGivenWeakKernelObject, 1 ],
                        [ WeakKernelObject, 1 ],
                    ],
  function( cat, alpha )
    
    return WeakKernelEmbeddingWithGivenWeakKernelObject( cat, alpha, WeakKernelObject( cat, alpha ) );
    
end : is_with_given_derivation := true );

## WeakKernelLift
InstallMethod( AddWeakKernelLift,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakKernelLift", category, func, -1 );
    
end );

InstallMethod( AddWeakKernelLift,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakKernelLift", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

## WeakKernelLiftWithGivenWeakKernelObject
InstallMethod( AddWeakKernelLiftWithGivenWeakKernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakKernelLiftWithGivenWeakKernelObject", category, func, -1 );
    
end );

InstallMethod( AddWeakKernelLiftWithGivenWeakKernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakKernelLiftWithGivenWeakKernelObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);

AddDerivationToCAP( WeakKernelLiftWithGivenWeakKernelObject,
                    "WeakKernelLiftWithGivenWeakKernelObject by calling WeakKernelLift with the WithGiven argument(s) dropped",
                    [
                        [ WeakKernelLift, 1 ],
                    ],
  function( cat, alpha, tau, K )
    
    return WeakKernelLift( cat, alpha, tau );
        
end : is_with_given_derivation := true );

AddDerivationToCAP( WeakKernelLift,
                    "WeakKernelLift by calling WeakKernelLiftWithGivenWeakKernelObject with the WithGiven object(s)",
                    [
                        [ WeakKernelLiftWithGivenWeakKernelObject, 1 ],
                        [ WeakKernelObject, 1 ],
                    ],
  function( cat, alpha, tau )
    
    return WeakKernelLiftWithGivenWeakKernelObject( cat, alpha, tau, WeakKernelObject( cat, alpha ) );
    
end : is_with_given_derivation := true );

## WeakKernelObject
InstallMethod( AddWeakKernelObject,
               [ IsCapCategory, IsFunction ],
               
  function( category, func )
    
    AddCapOperation( "WeakKernelObject", category, func, -1 );
    
end );

InstallMethod( AddWeakKernelObject,
               [ IsCapCategory, IsFunction, IsInt ],
               
    FunctionWithNamedArguments(
        [
            [ "IsPrecompiledDerivation", false ],
        ],
        function( CAP_NAMED_ARGUMENTS, category, func, weight )
            
            AddCapOperation( "WeakKernelObject", category, func, weight : IsPrecompiledDerivation := CAP_NAMED_ARGUMENTS.IsPrecompiledDerivation );
            
        end
    )
);
