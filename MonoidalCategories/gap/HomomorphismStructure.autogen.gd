# SPDX-License-Identifier: GPL-2.0-or-later
# MonoidalCategories: Monoidal and monoidal (co)closed categories
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Monoidal Categories

#! @Section Homomorphism Structure

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InterpretAsMorphismInRangeCategoryOfHomomorphismStructure`.
#! $F: ( arg2 ) \mapsto \mathtt{InterpretAsMorphismInRangeCategoryOfHomomorphismStructure}(arg2)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddInterpretAsMorphismInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddInterpretAsMorphismInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddInterpretAsMorphismInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddInterpretAsMorphismInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InterpretAsObjectInRangeCategoryOfHomomorphismStructure`.
#! $F: ( arg2 ) \mapsto \mathtt{InterpretAsObjectInRangeCategoryOfHomomorphismStructure}(arg2)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddInterpretAsObjectInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddInterpretAsObjectInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddInterpretAsObjectInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddInterpretAsObjectInRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InterpretMorphismFromRangeCategoryOfHomomorphismStructure`.
#! $F: ( arg2 ) \mapsto \mathtt{InterpretMorphismFromRangeCategoryOfHomomorphismStructure}(arg2)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddInterpretMorphismFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddInterpretMorphismFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddInterpretMorphismFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddInterpretMorphismFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `InterpretObjectFromRangeCategoryOfHomomorphismStructure`.
#! $F: ( arg2 ) \mapsto \mathtt{InterpretObjectFromRangeCategoryOfHomomorphismStructure}(arg2)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddInterpretObjectFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddInterpretObjectFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddInterpretObjectFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddInterpretObjectFromRangeCategoryOfHomomorphismStructure",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LiftAlongMorphismLiftingMorphismsFromTensorUnitWithGivenMorphism`.
#! $F: ( iota, eta ) \mapsto \mathtt{LiftAlongMorphismLiftingMorphismsFromTensorUnitWithGivenMorphism}(iota, eta)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLiftAlongMorphismLiftingMorphismsFromTensorUnitWithGivenMorphism",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLiftAlongMorphismLiftingMorphismsFromTensorUnitWithGivenMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLiftAlongMorphismLiftingMorphismsFromTensorUnitWithGivenMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLiftAlongMorphismLiftingMorphismsFromTensorUnitWithGivenMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenMorphism`.
#! $F: ( iota, eta ) \mapsto \mathtt{LiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenMorphism}(iota, eta)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenMorphism",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLiftAlongMorphismUniquelyLiftingMorphismsFromTensorUnitWithGivenMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismLiftingMorphismsFromTensorUnit`.
#! $F: ( a ) \mapsto \mathtt{MorphismLiftingMorphismsFromTensorUnit}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `MorphismUniquelyLiftingMorphismsFromTensorUnit`.
#! $F: ( a ) \mapsto \mathtt{MorphismUniquelyLiftingMorphismsFromTensorUnit}(a)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddMorphismUniquelyLiftingMorphismsFromTensorUnit",
                  [ IsCapCategory, IsList ] );
