# SPDX-License-Identifier: GPL-2.0-or-later
# MonoidalCategories: Monoidal and monoidal (co)closed categories
#
# Declarations
#
# THIS FILE IS AUTOMATICALLY GENERATED, SEE CAP_project/CAP/gap/MethodRecord.gi

#! @Chapter Monoidal Categories

#! @Section Add-methods

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCoclosedMonoidalCoevaluationMorphism`.
#! $F: ( a, b ) \mapsto \mathtt{LeftCoclosedMonoidalCoevaluationMorphism}(a, b)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCoclosedMonoidalCoevaluationMorphismWithGivenSource`.
#! $F: ( a, b, s ) \mapsto \mathtt{LeftCoclosedMonoidalCoevaluationMorphismWithGivenSource}(a, b, s)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalCoevaluationMorphismWithGivenSource",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCoclosedMonoidalEvaluationMorphism`.
#! $F: ( a, b ) \mapsto \mathtt{LeftCoclosedMonoidalEvaluationMorphism}(a, b)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCoclosedMonoidalEvaluationMorphism",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCoclosedMonoidalEvaluationMorphism",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalEvaluationMorphism",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalEvaluationMorphism",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftCoclosedMonoidalEvaluationMorphismWithGivenRange`.
#! $F: ( a, b, r ) \mapsto \mathtt{LeftCoclosedMonoidalEvaluationMorphismWithGivenRange}(a, b, r)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftCoclosedMonoidalEvaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftCoclosedMonoidalEvaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalEvaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftCoclosedMonoidalEvaluationMorphismWithGivenRange",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftInternalCoHomToTensorProductAdjunctionMap`.
#! $F: ( a, b, f ) \mapsto \mathtt{LeftInternalCoHomToTensorProductAdjunctionMap}(a, b, f)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftInternalCoHomToTensorProductAdjunctionMap",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftInternalCoHomToTensorProductAdjunctionMap",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftInternalCoHomToTensorProductAdjunctionMap",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftInternalCoHomToTensorProductAdjunctionMap",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `LeftInternalCoHomToTensorProductAdjunctionMapWithGivenTensorProduct`.
#! $F: ( a, b, f, t ) \mapsto \mathtt{LeftInternalCoHomToTensorProductAdjunctionMapWithGivenTensorProduct}(a, b, f, t)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddLeftInternalCoHomToTensorProductAdjunctionMapWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddLeftInternalCoHomToTensorProductAdjunctionMapWithGivenTensorProduct",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddLeftInternalCoHomToTensorProductAdjunctionMapWithGivenTensorProduct",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddLeftInternalCoHomToTensorProductAdjunctionMapWithGivenTensorProduct",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToLeftInternalCoHomAdjunctionMap`.
#! $F: ( c, b, g ) \mapsto \mathtt{TensorProductToLeftInternalCoHomAdjunctionMap}(c, b, g)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddTensorProductToLeftInternalCoHomAdjunctionMap",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddTensorProductToLeftInternalCoHomAdjunctionMap",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddTensorProductToLeftInternalCoHomAdjunctionMap",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddTensorProductToLeftInternalCoHomAdjunctionMap",
                  [ IsCapCategory, IsList ] );

#! @Description
#! The arguments are a category $C$ and a function $F$.
#! This operation adds the given function $F$
#! to the category for the basic operation `TensorProductToLeftInternalCoHomAdjunctionMapWithGivenLeftInternalCoHom`.
#! $F: ( c, b, g, i ) \mapsto \mathtt{TensorProductToLeftInternalCoHomAdjunctionMapWithGivenLeftInternalCoHom}(c, b, g, i)$.
#! @Returns nothing
#! @Arguments C, F
DeclareOperation( "AddTensorProductToLeftInternalCoHomAdjunctionMapWithGivenLeftInternalCoHom",
                  [ IsCapCategory, IsFunction ] );

DeclareOperation( "AddTensorProductToLeftInternalCoHomAdjunctionMapWithGivenLeftInternalCoHom",
                  [ IsCapCategory, IsFunction, IsInt ] );

DeclareOperation( "AddTensorProductToLeftInternalCoHomAdjunctionMapWithGivenLeftInternalCoHom",
                  [ IsCapCategory, IsList, IsInt ] );

DeclareOperation( "AddTensorProductToLeftInternalCoHomAdjunctionMapWithGivenLeftInternalCoHom",
                  [ IsCapCategory, IsList ] );
