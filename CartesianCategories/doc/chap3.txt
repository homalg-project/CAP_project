  
  [1X3 [33X[0;0YExamples and Tests[133X[101X
  
  
  [1X3.1 [33X[0;0YTest functions[133X[101X
  
  [1X3.1-1 TestCartesianBraidingCompatability[101X
  
  [33X[1;0Y[29X[2XTestCartesianBraidingCompatability[102X( [3Xv_1[103X, [3Xv_2[103X, [3Xv_3[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya boolean[133X
  
  [33X[0;0YThis  is  a  debug operation. The arguments are 3 objects [23Xv_1, v_2, v_3[123X in a
  braided   cartesian   category.   The   output   is  true  if  the  braiding
  compatabilities with the associator hold, false otherwise.[133X
  
  [1X3.1-2 TestCartesianBraidingCompatabilityForAllTriplesInList[101X
  
  [33X[1;0Y[29X[2XTestCartesianBraidingCompatabilityForAllTriplesInList[102X( [3XL[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya boolean[133X
  
  [33X[0;0YThis is a debug operation. The argument is a list [23XL[123X consisting of triples of
  objects  in a braided cartesian category. The output is true if the braiding
  compatabilities  with  the  associator  hold  for  all  those  triples false
  otherwise.[133X
  
  [1X3.1-3 BraidedCartesianCategoriesTest[101X
  
  [33X[1;0Y[29X[2XBraidedCartesianCategoriesTest[102X( [3Xcat[103X, [3Xa[103X, [3Xb[103X ) [32X function[133X
  
  [33X[0;0YThe arguments are[133X
  
  [30X    [33X[0;6Ya CAP category [23Xcat[123X[133X
  
  [30X    [33X[0;6Yobjects [23Xa, b[123X[133X
  
  [33X[0;0YThis     function     checks     for    every    operation    declared    in
  BraidedCartesianCategories.gd  if  it is computable in the CAP category [23Xcat[123X.
  If  yes,  then the operation is executed with the parameters given above and
  compared to the equivalent computation in the opposite category of [23Xcat[123X. Pass
  the options[133X
  
  [30X    [33X[0;6Y[10Xverbose := true[110X to output more information.[133X
  
  [30X    [33X[0;6Y[10Xonly_primitive_operations  :=  true[110X, which is passed on to Opposite(),
        to  only primitively install dual operations for primitively installed
        operations  in  [23Xcat[123X.  The advantage is, that more derivations might be
        tested.     On     the     downside,    this    might    test    fewer
        dual_pre/postprocessor_funcs.[133X
  
  [1X3.1-4 TestCocartesianBraidingCompatability[101X
  
  [33X[1;0Y[29X[2XTestCocartesianBraidingCompatability[102X( [3Xv_1[103X, [3Xv_2[103X, [3Xv_3[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya boolean[133X
  
  [33X[0;0YThis  is  a  debug operation. The arguments are 3 objects [23Xv_1, v_2, v_3[123X in a
  braided   cocartesian   category.   The  output  is  true  if  the  braiding
  compatabilities with the associator hold, false otherwise.[133X
  
  [1X3.1-5 TestCocartesianBraidingCompatabilityForAllTriplesInList[101X
  
  [33X[1;0Y[29X[2XTestCocartesianBraidingCompatabilityForAllTriplesInList[102X( [3XL[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya boolean[133X
  
  [33X[0;0YThis is a debug operation. The argument is a list [23XL[123X consisting of triples of
  objects  in  a  braided  cocartesian  category.  The  output  is true if the
  braiding  compatabilities  with  the  associator  hold for all those triples
  false otherwise.[133X
  
  [1X3.1-6 BraidedCocartesianCategoriesTest[101X
  
  [33X[1;0Y[29X[2XBraidedCocartesianCategoriesTest[102X( [3Xcat[103X, [3Xa[103X, [3Xb[103X ) [32X function[133X
  
  [33X[0;0YThe arguments are[133X
  
  [30X    [33X[0;6Ya CAP category [23Xcat[123X[133X
  
  [30X    [33X[0;6Yobjects [23Xa, b[123X[133X
  
  [33X[0;0YThis     function     checks     for    every    operation    declared    in
  BraidedCocartesianCategories.gd if it is computable in the CAP category [23Xcat[123X.
  If  yes,  then the operation is executed with the parameters given above and
  compared to the equivalent computation in the opposite category of [23Xcat[123X. Pass
  the options[133X
  
  [30X    [33X[0;6Y[10Xverbose := true[110X to output more information.[133X
  
  [30X    [33X[0;6Y[10Xonly_primitive_operations  :=  true[110X, which is passed on to Opposite(),
        to  only primitively install dual operations for primitively installed
        operations  in  [23Xcat[123X.  The advantage is, that more derivations might be
        tested.     On     the     downside,    this    might    test    fewer
        dual_pre/postprocessor_funcs.[133X
  
  [1X3.1-7 TestCartesianPentagonIdentity[101X
  
  [33X[1;0Y[29X[2XTestCartesianPentagonIdentity[102X( [3Xv_1[103X, [3Xv_2[103X, [3Xv_3[103X, [3Xv_4[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya boolean[133X
  
  [33X[0;0YThis is a debug operation. The arguments are 4 objects [23Xv_1, v_2, v_3, v_4[123X in
  a  category.  The  output is true if the pentagon identity holds for those 4
  objects, false otherwise.[133X
  
  [1X3.1-8 TestCartesianPentagonIdentityForAllQuadruplesInList[101X
  
  [33X[1;0Y[29X[2XTestCartesianPentagonIdentityForAllQuadruplesInList[102X( [3XL[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya boolean[133X
  
  [33X[0;0YThis is a debug operation. The argument is a list [23XL[123X consisting of quadruples
  of  objects  in  a  cartesian  category.  The output is true if the pentagon
  identity holds for all those quadruples, false otherwise.[133X
  
  [1X3.1-9 CartesianCategoriesTest[101X
  
  [33X[1;0Y[29X[2XCartesianCategoriesTest[102X( [3Xcat[103X, [3Xa[103X, [3Xb[103X, [3Xc[103X, [3Xalpha[103X, [3Xbeta[103X ) [32X function[133X
  
  [33X[0;0YThe arguments are[133X
  
  [30X    [33X[0;6Ya CAP category [23Xcat[123X[133X
  
  [30X    [33X[0;6Yobjects [23Xa, b, c[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\alpha: a \rightarrow b[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\beta: c \rightarrow d[123X[133X
  
  [33X[0;0YThis  function checks for every operation declared in CartesianCategories.gd
  if  it  is computable in the CAP category [23Xcat[123X. If yes, then the operation is
  executed  with  the  parameters  given  above and compared to the equivalent
  computation in the opposite category of [23Xcat[123X. Pass the options[133X
  
  [30X    [33X[0;6Y[10Xverbose := true[110X to output more information.[133X
  
  [30X    [33X[0;6Y[10Xonly_primitive_operations  :=  true[110X, which is passed on to Opposite(),
        to  only primitively install dual operations for primitively installed
        operations  in  [23Xcat[123X.  The advantage is, that more derivations might be
        tested.     On     the     downside,    this    might    test    fewer
        dual_pre/postprocessor_funcs.[133X
  
  [1X3.1-10 CartesianClosedCategoriesTest[101X
  
  [33X[1;0Y[29X[2XCartesianClosedCategoriesTest[102X( [3Xcat[103X, [3Xa[103X, [3Xb[103X, [3Xc[103X, [3Xd[103X, [3Xalpha[103X, [3Xbeta[103X, [3Xgamma[103X, [3Xdelta[103X, [3Xepsilon[103X, [3Xzeta[103X ) [32X function[133X
  
  [33X[0;0YThe arguments are[133X
  
  [30X    [33X[0;6Ya CAP category [23Xcat[123X[133X
  
  [30X    [33X[0;6Yobjects [23Xa, b, c, d[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\alpha: a \rightarrow b[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\beta: c \rightarrow d[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\gamma: a \times b \rightarrow 1[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\delta: c \times d \rightarrow 1[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\epsilon: 1 \rightarrow \mathrm{Hom}(a,b)[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\zeta: 1 \rightarrow \mathrm{Hom}(c,d)[123X[133X
  
  [33X[0;0YThis     function     checks     for    every    operation    declared    in
  CartesianClosedCategories.gd if it is computable in the CAP category [23Xcat[123X. If
  yes,  then  the  operation  is  executed with the parameters given above and
  compared to the equivalent computation in the opposite category of [23Xcat[123X. Pass
  the options[133X
  
  [30X    [33X[0;6Y[10Xverbose := true[110X to output more information.[133X
  
  [30X    [33X[0;6Y[10Xonly_primitive_operations  :=  true[110X, which is passed on to Opposite(),
        to  only primitively install dual operations for primitively installed
        operations  in  [23Xcat[123X.  The advantage is, that more derivations might be
        tested.     On     the     downside,    this    might    test    fewer
        dual_pre/postprocessor_funcs.[133X
  
  [1X3.1-11 TestCocartesianPentagonIdentity[101X
  
  [33X[1;0Y[29X[2XTestCocartesianPentagonIdentity[102X( [3Xv_1[103X, [3Xv_2[103X, [3Xv_3[103X, [3Xv_4[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya boolean[133X
  
  [33X[0;0YThis is a debug operation. The arguments are 4 objects [23Xv_1, v_2, v_3, v_4[123X in
  a  category.  The  output is true if the pentagon identity holds for those 4
  objects, false otherwise.[133X
  
  [1X3.1-12 TestCocartesianPentagonIdentityForAllQuadruplesInList[101X
  
  [33X[1;0Y[29X[2XTestCocartesianPentagonIdentityForAllQuadruplesInList[102X( [3XL[103X ) [32X operation[133X
  [6XReturns:[106X  [33X[0;10Ya boolean[133X
  
  [33X[0;0YThis is a debug operation. The argument is a list [23XL[123X consisting of quadruples
  of  objects  in  a  cocartesian category. The output is true if the pentagon
  identity holds for all those quadruples, false otherwise.[133X
  
  [1X3.1-13 CocartesianCategoriesTest[101X
  
  [33X[1;0Y[29X[2XCocartesianCategoriesTest[102X( [3Xcat[103X, [3Xa[103X, [3Xb[103X, [3Xc[103X, [3Xalpha[103X, [3Xbeta[103X ) [32X function[133X
  
  [33X[0;0YThe arguments are[133X
  
  [30X    [33X[0;6Ya CAP category [23Xcat[123X[133X
  
  [30X    [33X[0;6Yobjects [23Xa, b, c[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\alpha: a \rightarrow b[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\beta: c \rightarrow d[123X[133X
  
  [33X[0;0YThis     function     checks     for    every    operation    declared    in
  CocartesianCategories.gd  if  it  is  computable in the CAP category [23Xcat[123X. If
  yes,  then  the  operation  is  executed with the parameters given above and
  compared to the equivalent computation in the opposite category of [23Xcat[123X. Pass
  the options[133X
  
  [30X    [33X[0;6Y[10Xverbose := true[110X to output more information.[133X
  
  [30X    [33X[0;6Y[10Xonly_primitive_operations  :=  true[110X, which is passed on to Opposite(),
        to  only primitively install dual operations for primitively installed
        operations  in  [23Xcat[123X.  The advantage is, that more derivations might be
        tested.     On     the     downside,    this    might    test    fewer
        dual_pre/postprocessor_funcs.[133X
  
  [1X3.1-14 CocartesianCoclosedCategoriesTest[101X
  
  [33X[1;0Y[29X[2XCocartesianCoclosedCategoriesTest[102X( [3Xcat[103X, [3Xa[103X, [3Xb[103X, [3Xc[103X, [3Xd[103X, [3Xalpha[103X, [3Xbeta[103X, [3Xgamma[103X, [3Xdelta[103X, [3Xepsilon[103X, [3Xzeta[103X ) [32X function[133X
  
  [33X[0;0YThe arguments are[133X
  
  [30X    [33X[0;6Ya CAP category [23Xcat[123X[133X
  
  [30X    [33X[0;6Yobjects [23Xa, b, c, d[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\alpha: a \rightarrow b[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\beta: c \rightarrow d[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\gamma: 1 \rightarrow a \sqcup b[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\delta: 1 \rightarrow c \sqcup d[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\epsilon: \mathrm{coHom}(a,b) \rightarrow 1[123X[133X
  
  [30X    [33X[0;6Ya morphism [23X\zeta: \mathrm{coHom}(c,d) \rightarrow 1[123X[133X
  
  [33X[0;0YThis     function     checks     for    every    operation    declared    in
  CocartesianCoclosedCategories.gd  if  it  is  computable in the CAP category
  [23Xcat[123X.  If yes, then the operation is executed with the parameters given above
  and  compared to the equivalent computation in the opposite category of [23Xcat[123X.
  Pass the options[133X
  
  [30X    [33X[0;6Y[10Xverbose := true[110X to output more information.[133X
  
  [30X    [33X[0;6Y[10Xonly_primitive_operations  :=  true[110X, which is passed on to Opposite(),
        to  only primitively install dual operations for primitively installed
        operations  in  [23Xcat[123X.  The advantage is, that more derivations might be
        tested.     On     the     downside,    this    might    test    fewer
        dual_pre/postprocessor_funcs.[133X
  
  [1X3.1-15 CodistributiveCocartesianCategoriesTest[101X
  
  [33X[1;0Y[29X[2XCodistributiveCocartesianCategoriesTest[102X( [3Xcat[103X, [3Xa[103X, [3XL[103X ) [32X function[133X
  
  [33X[0;0YThe arguments are[133X
  
  [30X    [33X[0;6Ya CAP category [23Xcat[123X[133X
  
  [30X    [33X[0;6Yan object [23Xa[123X[133X
  
  [30X    [33X[0;6Ya list [23XL[123X of objects[133X
  
  [33X[0;0YThis     function     checks     for    every    operation    declared    in
  CodistributiveCocartesianCategories.gd  if  it  is  computable  in  the  CAP
  category  [23Xcat[123X.  If  yes,  then the operation is executed with the parameters
  given  above  and  compared  to  the  equivalent computation in the opposite
  category of [23Xcat[123X. Pass the options[133X
  
  [30X    [33X[0;6Y[10Xverbose := true[110X to output more information.[133X
  
  [30X    [33X[0;6Y[10Xonly_primitive_operations  :=  true[110X, which is passed on to Opposite(),
        to  only primitively install dual operations for primitively installed
        operations  in  [23Xcat[123X.  The advantage is, that more derivations might be
        tested.     On     the     downside,    this    might    test    fewer
        dual_pre/postprocessor_funcs.[133X
  
  [1X3.1-16 DistributiveCartesianCategoriesTest[101X
  
  [33X[1;0Y[29X[2XDistributiveCartesianCategoriesTest[102X( [3Xcat[103X, [3Xa[103X, [3XL[103X ) [32X function[133X
  
  [33X[0;0YThe arguments are[133X
  
  [30X    [33X[0;6Ya CAP category [23Xcat[123X[133X
  
  [30X    [33X[0;6Yan object [23Xa[123X[133X
  
  [30X    [33X[0;6Ya list [23XL[123X of objects[133X
  
  [33X[0;0YThis     function     checks     for    every    operation    declared    in
  DistributiveCartesianCategories.gd  if  it is computable in the CAP category
  [23Xcat[123X.  If yes, then the operation is executed with the parameters given above
  and  compared to the equivalent computation in the opposite category of [23Xcat[123X.
  Pass the options[133X
  
  [30X    [33X[0;6Y[10Xverbose := true[110X to output more information.[133X
  
  [30X    [33X[0;6Y[10Xonly_primitive_operations  :=  true[110X, which is passed on to Opposite(),
        to  only primitively install dual operations for primitively installed
        operations  in  [23Xcat[123X.  The advantage is, that more derivations might be
        tested.     On     the     downside,    this    might    test    fewer
        dual_pre/postprocessor_funcs.[133X
  
  
  [1X3.2 [33X[0;0YInfoOfInstalledOperationsOfCategory[133X[101X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XLoadPackage( "CartesianCategories", false );[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27Xdistributive := DummyCategory( rec([127X[104X
    [4X[25X>[125X [27X  list_of_operations_to_install :=[127X[104X
    [4X[25X>[125X [27X    ListOfDefiningOperations( "IsBicartesianClosedCategory" ),[127X[104X
    [4X[25X>[125X [27X  properties := [ "IsBicartesianClosedCategory", "IsSkeletalCategory" ] ) );;[127X[104X
    [4X[25Xgap>[125X [27XInfoOfInstalledOperationsOfCategory( distributive );[127X[104X
    [4X[28X21 primitive operations were used to derive 121 operations for this category \[128X[104X
    [4X[28Xwhich algorithmically[128X[104X
    [4X[28X* IsBicartesianClosedCategory[128X[104X
    [4X[28Xand not yet algorithmically[128X[104X
    [4X[28X* IsDistributiveCategory[128X[104X
    [4X[28Xand furthermore mathematically[128X[104X
    [4X[28X* IsSkeletalCategory[128X[104X
  [4X[32X[104X
  
