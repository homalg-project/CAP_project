  
  
                                [1X CompilerForCAP [101X
  
  
                  [1X Speed up and verify categorical algorithms [101X
  
  
                                   2025.08-01
  
  
                                 25 August 2025
  
  
                                Fabian Zickgraf
  
  
  
  Fabian Zickgraf
      Email:    [7Xmailto:f.zickgraf@dashdos.com[107X
      Homepage: [7Xhttps://github.com/zickgraf/[107X
      Address:  [33X[0;14YWalter-Flex-Str. 3[133X
                [33X[0;14Y57068 Siegen[133X
                [33X[0;14YGermany[133X
  
  
  
  -------------------------------------------------------
  
  
  [1XContents (CompilerForCAP)[101X
  
  1 [33X[0;0YUsing the compiler[133X
    1.1 [33X[0;0YTerminology[133X
    1.2 [33X[0;0YCapabilities of the compiler[133X
    1.3 [33X[0;0YRequirements[133X
    1.4 [33X[0;0YPrecompiling categories[133X
      1.4-1 CapJitPrecompileCategory
      1.4-2 CapJitPrecompileCategoryAndCompareResult
    1.5 [33X[0;0YCompiling a function manually[133X
      1.5-1 CapJitCompiledCAPOperationAsEnhancedSyntaxTree
      1.5-2 CapJitCompiledFunction
      1.5-3 CapJitCompiledFunctionAsEnhancedSyntaxTree
    1.6 [33X[0;0YGiving hints to the compiler[133X
    1.7 [33X[0;0YStopping the compiler at a certain level[133X
      1.7-1 StopCompilationAtCategory
      1.7-2 ContinueCompilationAtCategory
      1.7-3 StopCompilationAtPrimitivelyInstalledOperationsOfCategory
      1.7-4 ContinueCompilationAtPrimitivelyInstalledOperationsOfCategory
    1.8 [33X[0;0YDisabling the automatic inference of data types[133X
      1.8-1 CapJitDisableDataTypeInference
    1.9 [33X[0;0YCompiling step-by-step[133X
      1.9-1 CapJitEnableStepByStepCompilation
    1.10 [33X[0;0YProof assistant mode[133X
      1.10-1 CapJitEnableProofAssistantMode
      1.10-2 StateLemma
      1.10-3 PrintLemma
      1.10-4 AttestValidInputs
      1.10-5 ApplyLogicTemplate
      1.10-6 ApplyLogicTemplateNTimes
      1.10-7 AssertLemma
      1.10-8 StateProposition
      1.10-9 StateNextLemma
      1.10-10 AssertProposition
    1.11 [33X[0;0YGetting information about the compilation process[133X
      1.11-1 InfoCapJit
      1.11-2 CapJitSetDebugLevel
    1.12 [33X[0;0YFAQ[133X
  2 [33X[0;0YImproving and extending the compiler[133X
    2.1 [33X[0;0YLogic[133X
      2.1-1 CapJitAddLogicFunction
      2.1-2 CapJitAddLogicTemplate
    2.2 [33X[0;0YEnhanced syntax trees[133X
      2.2-1 ENHANCED_SYNTAX_TREE
      2.2-2 ENHANCED_SYNTAX_TREE_CODE
    2.3 [33X[0;0YIterating over a syntax tree[133X
      2.3-1 CapJitIterateOverTree
      2.3-2 CapJitIterateOverTreeWithCachedBindingResults
    2.4 [33X[0;0YTools[133X
      2.4-1 CapJitPrettyPrintSyntaxTree
      2.4-2 CapJitIsCallToGlobalFunction
      2.4-3 CapJitResultFuncCombineChildren
      2.4-4 CapJitContainsRefToFVAROutsideOfFuncStack
      2.4-5 CapJitGetOrCreateGlobalVariable
      2.4-6 CapJitFindNodeDeep
      2.4-7 CapJitFindNodes
      2.4-8 CapJitGetNodeByPath
      2.4-9 CapJitRemovedReturnFail
      2.4-10 CapJitPrettyPrintFunction
      2.4-11 CapJitCopyWithNewFunctionIDs
      2.4-12 CapJitIsEqualForEnhancedSyntaxTrees
      2.4-13 CapJitAddBinding
      2.4-14 CapJitValueOfBinding
      2.4-15 CapJitUnbindBinding
      2.4-16 CapJitReplacedEXPR_REF_FVARByValue
      2.4-17 CapJitGetNextUnusedVariableID
      2.4-18 CapJitDataTypeIsNestedListOfSimpleLiterals
      2.4-19 PrintWithCurrentlyCompiledFunctionLocation
      2.4-20 DisplayWithCurrentlyCompiledFunctionLocation
      2.4-21 ErrorWithCurrentlyCompiledFunctionLocation
      2.4-22 EvalStringStrict
      2.4-23 ConcatenationOfStringsAsEnumerationWithAnd
    2.5 [33X[0;0YCompilation steps[133X
      2.5-1 CapJitCleanedUpHoistedAndDeduplicatedExpressions
      2.5-2 CapJitAppliedCompilerHints
      2.5-3 CapJitReplacedGlobalVariablesByCategoryAttributes
      2.5-4 CapJitReplacedSourceAndRangeAttributes
      2.5-5 CapJitDeduplicatedExpressions
      2.5-6 CapJitDroppedHandledEdgeCases
      2.5-7 CapJitDroppedUnusedBindings
      2.5-8 CapJitHoistedExpressions
      2.5-9 CapJitHoistedBindings
      2.5-10 CapJitInferredDataTypes
      2.5-11 CapJitInlinedArguments
      2.5-12 CapJitInlinedBindings
      2.5-13 CapJitInlinedBindingsToVariableReferences
      2.5-14 CapJitInlinedBindingsFully
      2.5-15 CapJitInlinedFunctionCalls
      2.5-16 CapJitInlinedSimpleFunctionCalls
      2.5-17 CapJitAppliedLogic
      2.5-18 CapJitAppliedLogicTemplates
      2.5-19 CapJitOutlinedWrappedArguments
      2.5-20 CapJitResolvedGlobalVariables
      2.5-21 CapJitResolvedOperations
  3 [33X[0;0YExamples and tests[133X
    3.1 [33X[0;0YExamples[133X
    3.2 [33X[0;0YTests[133X
  
  
  [32X
